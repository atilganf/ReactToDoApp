{"version":3,"sources":["Components/ToDoForm.js","Components/ToDoElm.js","Components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setText","e","setState","text","target","value","handleSubmit","preventDefault","state","addTodo","id","shortid","generate","complete","react_default","a","createElement","className","onSubmit","onChange","placeholder","class","type","React","Component","ToDoElm","todo","onClick","toggleComplete","style","display","onDelete","ToDoList","todos","concat","toConsumableArray","changeToDoShow","str","todoShow","toggleAllComplete","map","objectSpread","toggleAll","deleteAllComplete","filter","deleteToDo","_this2","ToDoForm_ToDoForm","length","key","some","App","ToDoList_ToDoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAEqBA,cACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKVQ,QAAU,SAACC,GACPR,EAAKS,SAAS,CACVC,KAAMF,EAAEG,OAAOC,SARJZ,EAWnBa,aAAe,SAACL,GACZA,EAAEM,iBACsB,KAApBd,EAAKe,MAAML,MACXV,EAAKD,MAAMiB,QAAQ,CACfC,GAAIC,IAAQC,WACZT,KAAMV,EAAKe,MAAML,KACjBU,UAAU,IAGlBpB,EAAKS,SAAS,CAAEC,KAAM,MAlBtBV,EAAKe,MAAQ,CACTL,KAAM,IAHKV,wEAuBf,OACIqB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAWC,SAAUtB,KAAKU,cACtCQ,EAAAC,EAAAC,cAAA,SACIX,MAAOT,KAAKY,MAAML,KAClBgB,SAAUvB,KAAKI,QACfoB,YAAY,SAEhBN,EAAAC,EAAAC,cAAA,UAAQK,MAAM,WAAWC,KAAK,UAA9B,aA/BsBC,IAAMC,WCD7BC,EAAA,SAAAjC,GAAK,OACjBsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAWzB,EAAMkC,KAAKb,SAAW,mBAAqB,UACxDc,QAASnC,EAAMoC,gBAChBpC,EAAMkC,KAAKvB,MAEbW,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACfY,MAAO,CAAEC,QAAS,gBAClBH,QAASnC,EAAMuC,UAFlB,OCJeC,cAClB,SAAAA,EAAYxC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IAChBvC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,KAAMJ,KAOTiB,QAAU,SAAAiB,GACPjC,EAAKS,SAAS,CACX+B,MAAK,CAAGP,GAAHQ,OAAAxC,OAAAyC,EAAA,EAAAzC,CAAYD,EAAKe,MAAMyB,WAVfxC,EAenB2C,eAAiB,SAACC,GACf5C,EAAKS,SAAS,CACXoC,SAAUD,KAjBG5C,EAoBnB8C,kBAAoB,WACjB9C,EAAKS,SAAS,CACX+B,MAAOxC,EAAKe,MAAMyB,MAAMO,IAAI,SAAAd,GACzB,OAAOhC,OAAA+C,EAAA,EAAA/C,CAAA,GACDgC,EADN,CAEGb,SAAUpB,EAAKe,MAAMkC,cAG3BA,WAAYjD,EAAKe,MAAMkC,aA5BVjD,EA+BnBkD,kBAAoB,WACjBlD,EAAKS,SAAS,CACX+B,MAAOxC,EAAKe,MAAMyB,MAAMW,OAAO,SAAAlB,GAAI,OAAKA,EAAKb,cAjChCpB,EAqCnBoD,WAAa,SAACnC,GACXjB,EAAKS,SAAS,CACX+B,MAAOxC,EAAKe,MAAMyB,MAAMW,OAAO,SAAAlB,GAAI,OAAIA,EAAKhB,KAAOA,OArCtDjB,EAAKe,MAAQ,CACVyB,MAAO,GACPK,SAAU,MACVI,WAAW,GALEjD,8EA0CJiB,GACZd,KAAKM,SAAS,CACX+B,MAAOrC,KAAKY,MAAMyB,MAAMO,IAAI,SAAAd,GACzB,OAAIA,EAAKhB,KAAOA,EACNhB,OAAA+C,EAAA,EAAA/C,CAAA,GACDgC,EADN,CAEGb,UAAWa,EAAKb,WAGZa,uCAKV,IAAAoB,EAAAlD,KACFqC,EAAQ,GAQZ,OANGA,EADyB,QAAxBrC,KAAKY,MAAM8B,SACJ1C,KAAKY,MAAMyB,MACa,WAAxBrC,KAAKY,MAAM8B,SACX1C,KAAKY,MAAMyB,MAAMW,OAAO,SAAAlB,GAAI,OAAKA,EAAKb,WAEtCjB,KAAKY,MAAMyB,MAAMW,OAAO,SAAAlB,GAAI,OAAIA,EAAKb,WAG7CC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZH,EAAAC,EAAAC,cAAC+B,EAAD,CAAUtC,QAASb,KAAKa,UACxBK,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUU,QAAS,kBAAMmB,EAAKV,eAAe,SAA/D,OACAtB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUU,QAAS,kBAAMmB,EAAKV,eAAe,YAA/D,UACAtB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUU,QAAS,kBAAMmB,EAAKV,eAAe,cAA/D,YACAtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,gBAAyCrB,KAAKY,MAAMyB,MAAMW,OAAO,SAAAlB,GAAI,OAAKA,EAAKb,WAAUmC,QACxFf,EAAMO,IAAI,SAAAd,GAAI,OACZZ,EAAAC,EAAAC,cAACS,EAAD,CACGwB,IAAKvB,EAAKhB,GACVgB,KAAMA,EACNE,eAAgB,kBAAMkB,EAAKlB,eAAeF,EAAKhB,KAC/CqB,SAAU,kBAAMe,EAAKD,WAAWnB,EAAKhB,SAG1Cd,KAAKY,MAAMyB,MAAMiB,KAAK,SAAAxB,GAAI,OAAIA,EAAKb,WACjCC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBACfU,QAAS,kBAAMmB,EAAKH,sBADvB,uBAEgC,KACnC7B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,sBACfU,QAAS,kBAAMmB,EAAKP,sBADvB,+BArF0BhB,IAAMC,WCa7B2B,mLATX,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoC,EAAD,cALU7B,IAAMC,WCQJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2d7a2e4f.chunk.js","sourcesContent":["import React from 'react';\r\nimport shortid from \"shortid\";\r\nexport default class ToDoForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            text: \"\",\r\n        };\r\n    }\r\n    setText = (e) => {\r\n        this.setState({\r\n            text: e.target.value\r\n        });\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.text !== \"\") {\r\n            this.props.addTodo({\r\n                id: shortid.generate(),\r\n                text: this.state.text,\r\n                complete: false,\r\n            });\r\n        }\r\n        this.setState({ text: \"\" });\r\n    }\r\n    render() {\r\n        return (\r\n            <form className=\"toDoForm\" onSubmit={this.handleSubmit}>\r\n                <input\r\n                    value={this.state.text}\r\n                    onChange={this.setText}\r\n                    placeholder=\"Task\"\r\n                />\r\n                <button class=\"sbmt_btn\" type=\"submit\">+</button>\r\n            </form>\r\n        );\r\n    }\r\n}","import React from \"react\"\r\nexport default props => (\r\n   <div className=\"toDoElm\">\r\n      <div className={props.todo.complete ? \"toDoTxt complete\" : \"toDoTxt\" } \r\n         onClick={props.toggleComplete}\r\n      >{props.todo.text}\r\n      </div>\r\n      <button className=\"del_btn\"\r\n         style={{ display: \"inline-block\" }}\r\n         onClick={props.onDelete}>X\r\n      </button>\r\n   </div>\r\n)","import React from \"react\"\r\nimport ToDoForm from \"./ToDoForm\"\r\nimport ToDoElm from \"./ToDoElm\"\r\nexport default class ToDoList extends React.Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         todos: [],\r\n         todoShow: \"all\",\r\n         toggleAll: true\r\n      };\r\n   }\r\n   addTodo = todo => {\r\n      this.setState({\r\n         todos: [todo, ...this.state.todos]\r\n      })\r\n   }\r\n\r\n\r\n   changeToDoShow = (str) => {\r\n      this.setState({\r\n         todoShow: str,\r\n      })\r\n   }\r\n   toggleAllComplete = () => {\r\n      this.setState({\r\n         todos: this.state.todos.map(todo => {\r\n            return {\r\n               ...todo,\r\n               complete: this.state.toggleAll,\r\n            }\r\n         }),\r\n         toggleAll: !this.state.toggleAll\r\n      });\r\n   }\r\n   deleteAllComplete = () => {\r\n      this.setState({\r\n         todos: this.state.todos.filter(todo => !todo.complete)\r\n      })\r\n   }\r\n   //ToDoElm methods\r\n   deleteToDo = (id) => {\r\n      this.setState({\r\n         todos: this.state.todos.filter(todo => todo.id !== id)\r\n      })\r\n   }\r\n   toggleComplete(id) {\r\n      this.setState({\r\n         todos: this.state.todos.map(todo => {\r\n            if (todo.id === id) {\r\n               return {\r\n                  ...todo,\r\n                  complete: !todo.complete\r\n               }\r\n            } else {\r\n               return todo\r\n            }\r\n         }),\r\n      })\r\n   }\r\n   render() {\r\n      let todos = []\r\n      if (this.state.todoShow === \"all\") {\r\n         todos = this.state.todos;\r\n      } else if (this.state.todoShow === \"active\") {\r\n         todos = this.state.todos.filter(todo => !todo.complete);\r\n      } else {\r\n         todos = this.state.todos.filter(todo => todo.complete);\r\n      }\r\n      return (\r\n         <div className=\"toDoList\">\r\n            <ToDoForm addTodo={this.addTodo} />\r\n            <button className=\"top_btn\" onClick={() => this.changeToDoShow(\"all\")}>All</button>\r\n            <button className=\"top_btn\" onClick={() => this.changeToDoShow(\"active\")}>Active</button>\r\n            <button className=\"top_btn\" onClick={() => this.changeToDoShow(\"complete\")}>Complete</button>\r\n            <div className=\"todo_left\">Todos Left : {this.state.todos.filter(todo => !todo.complete).length}</div>\r\n            {todos.map(todo => (\r\n               <ToDoElm\r\n                  key={todo.id}\r\n                  todo={todo}\r\n                  toggleComplete={() => this.toggleComplete(todo.id)}\r\n                  onDelete={() => this.deleteToDo(todo.id)}\r\n               />)\r\n            )}\r\n            {this.state.todos.some(todo => todo.complete) ?\r\n               <button className=\"btm_btn delAll_btn\"\r\n                  onClick={() => this.deleteAllComplete()}\r\n               >Delete All Complete</button> : null}\r\n            <button className=\"btm_btn toggAll_btn\"\r\n               onClick={() => this.toggleAllComplete()}>Toggle All Complete</button>\r\n         </div>\r\n      );\r\n   }\r\n}","import React from 'react';\nimport './App.css';\nimport ToDoList from \"./Components/ToDoList\"\n\nclass App extends React.Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <ToDoList/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}